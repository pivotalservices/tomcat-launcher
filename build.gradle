buildscript {
    ext {
        springBootVersion = '1.4.5.RELEASE'
        buildNrLoc = project.hasProperty('buildNr') ? "${buildNr}" : "0.0.1-SNAPSHOT"
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

group = 'io.pivotal'
version = buildNrLoc

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
    systemPropsFromGradle = {
        project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/it/java')
        }
        resources.srcDir file('src/it/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR6"
    }
}

dependencies {
    compile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    compile("org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}")
    compile("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}")
    compile("org.apache.tomcat:tomcat-jasper:${tomcatVersion}")
    compile("org.apache.tomcat:tomcat-jasper-el:${tomcatVersion}")
    compile("org.apache.tomcat:tomcat-jsp-api:${tomcatVersion}")
    compile("org.apache.tomcat:tomcat-jdbc:${tomcatVersion}")

//    compile("org.springframework.cloud:spring-cloud-config-client:1.2.3.RELEASE")

    runtime("org.apache.tomcat:tomcat-dbcp:${tomcatVersion}")

    compile("org.springframework.retry:spring-retry:1.2.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-starter-config")
    compile("org.springframework.boot:spring-boot-starter-aop")

    testCompile("org.springframework.cloud:spring-cloud-config-server")
    testCompile("org.springframework.boot:spring-boot-starter-web")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    testCompile("junit:junit-dep:4.11")
    testCompile("com.github.stefanbirkner:system-rules:1.16.1")
    testCompile("org.hamcrest:hamcrest-library:1.3")
    testCompile "org.mockito:mockito-core:1.10.19"
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task integrationTest(type: Test) {
    jvmArgs systemPropsFromGradle()
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    group 'verification'
    description = "Runs the integration tests"
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test