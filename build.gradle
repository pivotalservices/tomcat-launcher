buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply from: 'gradle/pipeline.gradle'

group = 'io.pivotal'
version = getProp('newVersion') ?: "${buildVersion}"

ext {
	projectGroupId = project.group
	projectArtifactId = project.name
	projectVersion = project.version
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    if (getProp("M2_LOCAL")) {
  		maven {
  			url getProp("M2_LOCAL")
  		}
  	}
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://jitpack.io" }
}

publishing {
	repositories {
		maven {
			url getProp('REPO_WITH_JARS') ?: 'http://localhost:8081/artifactory/libs-release-local'
			credentials {
				username getProp('M2_SETTINGS_REPO_USERNAME') ?: 'admin'
				password getProp('M2_SETTINGS_REPO_PASSWORD') ?: 'password'
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.name
			from components.java
		}
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

dependencies {
    compile("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    compile("org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}")
    compile("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}")
    compile("org.apache.tomcat:tomcat-jasper:${tomcatVersion}")
    compile("org.apache.tomcat:tomcat-jasper-el:${tomcatVersion}")
    compile("org.apache.tomcat:tomcat-jsp-api:${tomcatVersion}")
    compile("org.apache.tomcat:tomcat-jdbc:${tomcatVersion}")
    runtime("org.apache.tomcat:tomcat-dbcp:${tomcatVersion}")

	compile("org.springframework:spring-core:4.3.4.RELEASE")

    testCompile("com.github.stefanbirkner:system-rules:1.16.1")
    testCompile("org.hamcrest:hamcrest-library:1.3")
    testCompile "org.mockito:mockito-core:1.10.19"
}

String getProp(String propName) {
	return hasProperty(propName) ?
			(getProperty(propName) ?: System.properties[propName]) : System.properties[propName] ?:
			System.getenv(propName)
}
